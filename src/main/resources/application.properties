spring.application.name=jwt-auth-blog

# Config du serveur
server.port=${PORT:8080}
server.servlet.context-path=/api

# Config de la BDD Postgres
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Config JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# Configuration JWT
app.jwt.secret=${JWT_SECRET}
app.jwt.expiration=${JWT_EXPIRATION:86400000}
app.jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:2592000000}
logging.level.com.blog.jwtauthblog=DEBUG

# Configuration CORS pour la production
<<<<<<< Updated upstream
app.cors.allowed-origins=${ALLOWED_ORIGINS:https://frontend.com}
=======
app.cors.allowed-origins=${ALLOWED_ORIGINS:http://localhost:5173,http://localhost:5174,http://localhost:4173,http://localhost:3000}
>>>>>>> Stashed changes
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true


# Logging pour la production
logging.level.root=WARN
logging.level.com.example.jwtauthdemo=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n